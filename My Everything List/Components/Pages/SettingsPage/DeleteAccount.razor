@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Authentication.Cookies
@using Microsoft.EntityFrameworkCore
@using My_Everything_List.Data
@using My_Everything_List.Models
@using My_Everything_List.Models.ViewModels
@using My_Everything_List.Services.UserService

@inject IUserService User
@inject NavigationManager Navigation
@inject IDbContextFactory<MyEverythingListContext> DbFactory

<EditForm Model="Model" OnValidSubmit="OnClickDeleteAccount" Enhance>
    <DataAnnotationsValidator/>
    <button type="submit" class="btn btn-danger">
        <Icon Name="IconName.Trash"/>
        Delete account
    </button>
</EditForm>
@* <SettingsItem Title="Delete Account" Color="CardColor.Danger" Icon="IconName.Trash"/> *@

@code {
    [CascadingParameter] HttpContext HttpContext { get; set; }
    [SupplyParameterFromForm] private DeleteUserModel Model { get; set; } = new();

    private User _currentUser = default!;

    protected override async Task OnInitializedAsync()
    {
        var user = await User.GetUser();
        if (user is null) Navigation.NavigateTo("/");
        else _currentUser = user;

        await base.OnInitializedAsync();
    }

    public async Task OnClickDeleteAccount()
    {
        await using var context = await DbFactory.CreateDbContextAsync();

        await HttpContext.SignOutAsync(CookieAuthenticationDefaults.AuthenticationScheme);

        var user = await context.User.FirstAsync(u => u.Id == _currentUser.Id);
        context.User.Remove(user);

        await Console.Out.WriteLineAsync("Account Deleted");
        Navigation.NavigateTo("/", true);
    }

}
