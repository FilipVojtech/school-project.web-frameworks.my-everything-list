@page "/books"
@rendermode InteractiveServer
@attribute [Authorize(Roles = "Admin,User")]
@implements IDisposable
@implements IAsyncDisposable

@inject NavigationManager Navigation
@inject MyEverythingListContext Context
@inject IUserService User

@using Microsoft.AspNetCore.Authorization
@using Microsoft.EntityFrameworkCore
@using My_Everything_List.Data
@using My_Everything_List.Models
@using My_Everything_List.Services.UserService

<PageTitle>Your Books</PageTitle>

<div class="container-fluid d-flex justify-content-between mb-3">
    <h3>Books</h3>
    <SearchBookModal ButtonTitle="Add Book" OnItemSelected="OnItemSelected"/>
</div>

@foreach (var userBook in _currentUser.UsersBooks)
{
    var book = userBook.Book;

    <BookItem
        Id="@book.Id.ToString()"
        Title="@book.Title"
        Authors="@book.Authors"
        Description="@book.Description"
        Image="@book.Image"
        Isbn="@book.Isbn"
        OnClick='_ => Navigation.NavigateTo($"/books/book/{book.Id}")'
    />
    <p>Rating: @userBook.Rating</p>
}

@code {
    private User _currentUser = default!;

    protected override async Task OnInitializedAsync()
    {
        var user = await User.GetUser();

        if (user is null) Navigation.NavigateTo("/");
        else
            _currentUser = Context.User
                .Include(u => u.UsersBooks)
                .Include(u => u.SavedBooks)
                .First(u => u == user);

        await base.OnInitializedAsync();
    }

    private void OnItemSelected(object? sender, Book book)
    {
        // TODO: Move logic to BookService
        // If book is not in DB
        // Add it
        var bookInDb = Context.Books.FirstOrDefault(b => b.Isbn == book.Isbn)
                       ?? Context.Books.Add(book).Entity;

        // Check that it is not already saved by user
        if (_currentUser.SavedBooks.Contains(bookInDb)) return;
        // If not, save it to users saved books
        // Use the entity
        _currentUser.SavedBooks.Add(bookInDb);
        Context.SaveChanges();
        StateHasChanged();
    }

    public void Dispose()
    {
        Context?.Dispose();
    }

    public async ValueTask DisposeAsync()
    {
        if (Context != null) await Context.DisposeAsync();
    }

}
