@page "/books"
@rendermode InteractiveServer
@attribute [Authorize(Roles = "Admin,User")]

@inject NavigationManager Navigation
@inject IDbContextFactory<MyEverythingListContext> DbFactory
@inject IUserService User

@using Microsoft.AspNetCore.Authorization
@using Microsoft.EntityFrameworkCore
@using My_Everything_List.Data
@using My_Everything_List.Models
@using My_Everything_List.Services.UserService

<PageTitle>Your Books</PageTitle>

<div class="container-fluid d-flex justify-content-between mb-3">
    <h3>Books</h3>
    <SearchBookModal ButtonTitle="Add Book" OnItemSelected="OnItemSelected"/>
</div>

@foreach (var userBook in _books)
{
    var book = userBook.Book;

    <BookItem
        Id="@book.Id.ToString()"
        Title="@book.Title"
        Authors="@book.Authors"
        Description="@book.Description"
        Image="@book.Image"
        Isbn="@book.Isbn"
        OnClick='_ => Navigation.NavigateTo($"/books/book/{book.Id}")'
    />
    <p>Rating: @userBook.Rating</p>
}

@code {
    private List<UsersBooks> _books = [];
    private User _currentUser;

    protected override async Task OnInitializedAsync()
    {
        var user = await User.GetUser();

        if (user is null) Navigation.NavigateTo("/");
        else _currentUser = user;

        await using (var context = await DbFactory.CreateDbContextAsync())
        {
            _books = context.UsersBooks
                .AsNoTracking()
                .Where(ub => ub.User == _currentUser)
                .Include(ub => ub.Book)
                .ToList();
        }

        await base.OnInitializedAsync();
    }

    private void OnItemSelected(object? sender, Book book)
    {
        // TODO: Move logic to BookService
        using var context = DbFactory.CreateDbContext();
        var bookInDb = context.Books.FirstOrDefault(b => b.Isbn == book.Isbn);

        // If book is not in DB
        if (bookInDb is null)
        {
            // Implicitly, it cannot be saved by user
            //Add it to users saved books and therefore add it to DB as well
            context.User.First(u => u == _currentUser).SavedBooks.Add(book);
            context.SaveChanges();

            _books.Add(book);
            StateHasChanged();
        }
        // Book is in DB
        // Check that it is not already saved by user
        else if (!_books.Contains(bookInDb))
        {
            // If not, save it to users saved books
            // Use the bookInDb var to not add duplicate
            context.User.First(u => u == _currentUser).SavedBooks.Add(bookInDb);
            context.SaveChanges();

            _books.Add(book);
            StateHasChanged();
        }
    }

}
