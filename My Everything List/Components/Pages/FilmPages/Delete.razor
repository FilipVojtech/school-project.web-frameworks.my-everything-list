@page "/admin/films/delete"
@attribute [Authorize(Roles = "Admin")]

@using Microsoft.AspNetCore.Authorization
@using Microsoft.EntityFrameworkCore
@using My_Everything_List.Data
@using My_Everything_List.Models

@inject IDbContextFactory<MyEverythingListContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Delete</PageTitle>

<h1>Delete</h1>

<p>Are you sure you want to delete this?</p>
<div>
    <h2>Film</h2>
    <hr/>
    @if (film is null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        <dl class="row">
            <dt class="col-sm-2">Title</dt>
            <dd class="col-sm-10">@film.Title</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">ReleaseDate</dt>
            <dd class="col-sm-10">@film.ReleaseDate</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Genre</dt>
            <dd class="col-sm-10">@film.Genre</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Price</dt>
            <dd class="col-sm-10">@film.Price</dd>
        </dl>
        <EditForm method="post" Model="film" OnValidSubmit="DeleteFilm" FormName="delete" Enhance>
            <button type="submit" class="btn btn-danger" disabled="@(film is null)">Delete</button>
            |
            <a href="/admin/films">Back to List</a>
        </EditForm>
    }
</div>

@code {
    private Film? film;

    [SupplyParameterFromQuery] private int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        film = await context.Film.FirstOrDefaultAsync(m => m.Id == Id);

        if (film is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    private async Task DeleteFilm()
    {
        using var context = DbFactory.CreateDbContext();
        context.Film.Remove(film!);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/admin/films");
    }

}
