@page "/songs"
@rendermode InteractiveServer
@attribute [Authorize(Roles = "Admin,User")]

@inject NavigationManager Navigation
@inject IDbContextFactory<MyEverythingListContext> DbFactory

@using Microsoft.AspNetCore.Authorization
@using Microsoft.EntityFrameworkCore
@using My_Everything_List.Data
@using My_Everything_List.Models

<div class="container-fluid d-flex justify-content-between mb-3">
    <h3>Songs</h3>
    <SearchMusicModal ButtonTitle="Add Music" OnItemSelected="(_, song) => AddMusicItem(song)"/>
</div>

@{
    var artists = _musicItems.FindAll(item => item.ItemType == MusicItemType.Artist);
    var albums = _musicItems.FindAll(item => item.ItemType == MusicItemType.Album);
    var tracks = _musicItems.FindAll(item => item.ItemType == MusicItemType.Track);

    if (tracks.Count > 0)
    {
        foreach (var track in tracks.Cast<Song>())
        {
            <SongItem
                Id="@track.Id.ToString()"
                Title="@track.Name"
                Artist="@track.Artist"
                Image="@track.Image"
                OnClick='() => Navigation.NavigateTo($"/songs/song/{track.Id}")'
            />
        }
    }

    if (artists.Count > 0)
    {
        <h3>Artists</h3>
        @foreach (var artist in artists.Cast<Artist>())
        {
            <ArtistItem
                Id="@artist.Id.ToString()"
                Title="@artist.Name"
                Image="@artist.Image"
                OnClick='()=>Navigation.NavigateTo($"/songs/artist/{artist.Id}")'
            />
        }
    }

    if (albums.Count > 0)
    {
        <h3>Albums</h3>
        @foreach (var album in albums.Cast<Album>())
        {
            <AlbumItem
                Id="@album.Id.ToString()"
                Title="@album.Name"
                Image="@album.Image"
                OnClick='() => Navigation.NavigateTo($"/songs/album/{album.Id}")'
            />
        }
    }
}

@code {
    List<MusicItem> _musicItems = [];

    protected override async Task OnInitializedAsync()
    {
        await using var context = await DbFactory.CreateDbContextAsync();
        _musicItems = context.MusicItems.ToList();
        await base.OnInitializedAsync();
    }

    private void AddMusicItem(MusicItem item)
    {
        _musicItems.Add(item);
        StateHasChanged();

        using var context = DbFactory.CreateDbContext();
        context.MusicItems.Add(item);
        context.SaveChanges();
    }

}
