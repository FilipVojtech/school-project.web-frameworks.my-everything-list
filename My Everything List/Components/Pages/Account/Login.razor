@page "/login"

@using System.Security.Claims
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Authentication.Cookies
@using My_Everything_List.Data
@using My_Everything_List.Models.ViewModels

@inject MyEverythingListContext DbContext
@inject NavigationManager Navigation

<PageTitle>Login</PageTitle>

<div>
    <h3 class="text-center">Login</h3>

    <EditForm Model="Model" OnValidSubmit="Authenticate" FormName="LoginForm">
        <DataAnnotationsValidator/>
        <ValidationSummary/>
        <div class="form-floating mb-3">
            <InputText id="email" @bind-Value="Model.Email" type="email" class="form-control" placeholder=""/>
            <label for="email">Email</label>
            <ValidationMessage For="() => Model.Email" class="text-danger"/>
        </div>
        <div class="form-floating mb-3">
            <InputText id="password" @bind-Value="Model.Password" type="password" class="form-control" placeholder=""/>
            <label for="password">Password</label>
            <ValidationMessage For="() => Model.Password" class="text-danger"/>
        </div>
        <div>
            <span class="text=danger">@_errorMessage</span>
        </div>
        <div class="d-grid gap-2">
            <button class="btn btn-primary" type="submit">Login</button>
        </div>
    </EditForm>
</div>


@code {
    [CascadingParameter] public HttpContext? HttpContext { get; set; }
    [SupplyParameterFromForm] public LoginViewModel Model { get; set; } = new();

    private string? _errorMessage = string.Empty;

    private async Task Authenticate()
    {
        var userAccount = DbContext.User.FirstOrDefault(user => user.Email == Model.Email);
        if (userAccount == null || userAccount.Password != Model.Password)
        {
            _errorMessage = "Incorrect credentials.";
            return;
        }

        var claims = new List<Claim>
        {
            new(ClaimTypes.NameIdentifier, userAccount.Id.ToString()),
            new(ClaimTypes.Email, Model.Email),
            new(ClaimTypes.Role, userAccount.Role)
        };

        var identity = new ClaimsIdentity(claims, CookieAuthenticationDefaults.AuthenticationScheme);
        var principal = new ClaimsPrincipal(identity);
        await HttpContext.SignInAsync(principal);
        Navigation.NavigateTo("/");
    }

}
