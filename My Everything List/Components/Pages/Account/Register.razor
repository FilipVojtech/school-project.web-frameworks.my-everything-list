@page "/register"
@rendermode InteractiveServer

@using System.ComponentModel.DataAnnotations
@using System.Security.Claims
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Authentication.Cookies
@using My_Everything_List.Data
@using My_Everything_List.Models
@using My_Everything_List.Models.ViewModels

@inject MyEverythingListContext DbContext
@inject NavigationManager Navigation

<PageTitle>Register</PageTitle>

<div>
    <h3 class="text-center mb-3">Register</h3>

    <EditForm Model="@Model" OnValidSubmit="RegisterUser" FormName="register-form" Enhance>
        <DataAnnotationsValidator/>
        <div class="form-floating mb-2">
            <InputText id="email" @bind-Value="Model.Email" type="email" class="form-control" placeholder=""/>
            <label for="email">Email</label>
            <ValidationMessage For="() => Model.Email" class="text-danger"/>
        </div>
        <div class="form-floating mb-2">
            <InputText id="password" @bind-Value="Model.Password" type="password" class="form-control" placeholder=""/>
            <label for="password">Password</label>
            @{
                var validationResult = new List<ValidationResult>();
                var ctx = new ValidationContext(Model) { MemberName = nameof(Model.Password) };
                Validator.TryValidateProperty(Model.Password, ctx, validationResult);
            }
            <div class="text-danger">
                @foreach (var result in validationResult)
                {
                    @(new MarkupString(result.ErrorMessage ?? string.Empty))
                    <br/>
                }
            </div>
        </div>
        <div class="mb-2"><span class="text-danger">@_errorMessage</span></div>
        <div class="d-grid gap-2">
            <button class="btn btn-primary" type="submit">Register</button>
        </div>
    </EditForm>
</div>

@code {
    [CascadingParameter] public HttpContext HttpContext { get; set; }
    [SupplyParameterFromForm] public RegisterViewModel Model { get; set; } = new();

    private string? _errorMessage = string.Empty;

    private async Task RegisterUser()
    {
        var isEmailInUse = DbContext.User.Any(user => user.Email == Model.Email);

        if (isEmailInUse)
        {
            _errorMessage = "Email already in use. Please choose a different one.";
            return;
        }

        var userAccount = DbContext.User.Add(new User(Model.Email, Model.Password, "User"));
        await DbContext.SaveChangesAsync();

        var claims = new List<Claim>
        {
            new(ClaimTypes.Email, Model.Email),
            new(ClaimTypes.Role, userAccount.Entity.Role)
        };

        var identity = new ClaimsIdentity(claims, CookieAuthenticationDefaults.AuthenticationScheme);
        var principal = new ClaimsPrincipal(identity);
        await HttpContext.SignInAsync(principal);
        Navigation.NavigateTo("/");
    }

}
