@page "/register"

@using System.Security.Claims
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Authentication.Cookies
@using My_Everything_List.Data
@using My_Everything_List.Models
@using My_Everything_List.Models.ViewModels

@inject MyEverythingListContext DbContext
@inject NavigationManager Navigation

<PageTitle>Register</PageTitle>

<h3>Register</h3>

<EditForm Model="@Model" OnValidSubmit="RegisterUser" FormName="register-form">
    <DataAnnotationsValidator/>
    <ValidationSummary/>
    <div>
        <label for="email">Email:</label>
        <InputText id="email" @bind-Value="Model.Email" type="email" class="form-control"/>
        <ValidationMessage For="() => Model.Email" class="text-danger"/>
    </div>
    <div>
        <label for="password">Password:</label>
        <InputText id="password" @bind-Value="Model.Password" type="password" class="form-control"/>
        <ValidationMessage For="() => Model.Password" class="text-danger"/>
    </div>
    <div><span class="text-danger">@_errorMessage</span></div>
    <div>
        <button type="submit">Register</button>
    </div>
</EditForm>

@code {
    [CascadingParameter] public HttpContext HttpContext { get; set; }
    [SupplyParameterFromForm] public RegisterViewModel Model { get; set; } = new();

    private string? _errorMessage = string.Empty;

    private async Task RegisterUser()
    {
        var isEmailInUse = DbContext.User.Any(user => user.Email == Model.Email);

        if (isEmailInUse)
        {
            _errorMessage = "Email already in use. Please choose a different one.";
            return;
        }

        var userAccount = DbContext.User.Add(new User(Model.Email, Model.Password, "User"));
        await DbContext.SaveChangesAsync();

        var claims = new List<Claim>
        {
            new(ClaimTypes.Email, Model.Email),
            new(ClaimTypes.Role, userAccount.Entity.Role)
        };

        var identity = new ClaimsIdentity(claims, CookieAuthenticationDefaults.AuthenticationScheme);
        var principal = new ClaimsPrincipal(identity);
        await HttpContext.SignInAsync(principal);
        Navigation.NavigateTo("/");
    }

}
